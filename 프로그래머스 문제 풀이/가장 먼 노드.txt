#include <string>
#include <vector>
#include <queue>

using namespace std;

vector<pair<int, int> > a[20001];
int d[20001];
int INF = 1000000000;

void dijkstra(int start){
    d[start] = 0;
    priority_queue<pair<int, int> > pq;
    pq.push(make_pair(start, 0));
    while(!pq.empty()){
        int current = pq.top().first;
        int distance = -pq.top().second;
        pq.pop();
        if(d[current] < distance) continue;
        for(int i = 0; i < a[current].size(); i++){
            int next = a[current][i].first;
            int nextDistance = distance + a[current][i].second;
            if(nextDistance < d[next]){
                d[next] = nextDistance;
                pq.push(make_pair(next, -nextDistance));
            }
        }
    }
}

int solution(int n, vector<vector<int>> edge) {
    int answer = 0, max = 0;
    
    for(int i = 0; i < edge.size(); i++){
        a[edge[i][0]].push_back(make_pair(edge[i][1], 1));
        a[edge[i][1]].push_back(make_pair(edge[i][0], 1));
    }
    
    for(int i = 1; i <= n; i++){
        d[i] = INF;
    }
    
    dijkstra(1);
    
    for(int i = 1; i <= n; i++){
        if(d[i] > max){
            max = d[i];
        }
    }
    
    for(int i = 1; i <= n; i++){
        if(d[i] == max){
            answer++;
        }
    }
    
    return answer;
}